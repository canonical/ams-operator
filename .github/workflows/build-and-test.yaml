name: Build & Test

on:
  workflow_call:
    inputs:
      snap_risk_level:
        type: string
        description: |
          The track of the snap to test against. Defaults to the default risk
          level defined in the charm.
        default: ""
        required: false
    outputs:
      artifact-prefix:
        description: "The charms built by this workflow"
        value: ${{ jobs.build.outputs.artifact-prefix }}
jobs:
  lint:
    name: Lint
    runs-on: [self-hosted, linux, X64, jammy, large]
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Install dependencies
        run: python3 -m pip install tox
      - name: Run linters
        run: tox -e lint

  unit-test:
    name: Unit tests
    runs-on: [self-hosted, linux, X64, jammy, large]
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Install dependencies
        run: python -m pip install tox
      - name: Run tests
        run: tox -e unit

  build:
    name: Build charm
    uses: canonical/data-platform-workflows/.github/workflows/build_charm.yaml@58f047f7eebbde23770e7058d3f62f88ce7fe0dd # v16.3.0

  collect-tests:
    name: Collect tests for charms
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
    - name: Assign charm artifacts to runners
      id: charm-to-runner
      run: |
        # Reverse lookup for artifact base index to its architecture
        ./scripts/ci/get-runners.py
    outputs:
      bases: ${{ steps.charm-to-runner.outputs.bases }}

  integration-test:
    name: Integration tests
    needs:
      - lint
      - unit-test
      - collect-tests
      - build
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        agent-versions:
          - "3.2.2"  # renovate: latest juju 3
          - "2.9.44"  # renovate: latest juju 2
        base: ${{ fromJSON(needs.collect-tests.outputs.bases) }}
    runs-on: "${{matrix.base.runner_labels}}"
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Download packed charm(s)
        uses: actions/download-artifact@v4
        id: downloaded-charm
        with:
          name: ${{ needs.build.outputs.artifact-prefix }}-base-${{ matrix.base.base_index }}
      - name: Set channel
        run: |
          juju_channel=$(echo "${{ matrix.agent-versions }}" | cut -c 1-3)
          echo "channel=${juju_channel}/stable" >> "$GITHUB_ENV"
          juju_major=$(echo "${{ matrix.agent-versions }}" | cut -c 1)
          echo "libjuju=juju${juju_major}" >> "$GITHUB_ENV"
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: lxd
          juju-channel: "${{ env.channel }}"
          bootstrap-options: "--agent-version ${{ matrix.agent-versions }}"
      - name: Run integration tests
        run: |
          mv ${{ steps.downloaded-charm.outputs.download-path }}/*.charm ams.charm
          args="--charm=./ams.charm"
          if [ "${{ matrix.base.arch }}" == "arm64" ]; then
            args="${args} --constraints arch=arm64"
          fi
          if [ -n "${{ inputs.snap_risk_level }}" ]; then
            args="${args} --snap-risk-level ${{ inputs.snap_risk_level }}"
          fi
          tox -e integration-${{ env.libjuju }} -- ${args}
